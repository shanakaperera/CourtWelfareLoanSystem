


        month_sub_col.setCellValueFactory((TableColumn.CellDataFeatures<LoanPayment, Button> param) -> {
            LoanPayment payment = param.getValue();
            double tot_sub = payment.getAciFee() + payment.getHoiFee() + payment.getMembershipFee()
                    + payment.getAdmissionFee() + payment.getSavingsFee() + payment.getOptionalFee();
            Button b = new Button(TextFormatHandler.CURRENCY_DECIMAL_FORMAT.format(tot_sub));
            b.setOnAction(evt -> {
                List<MemberSubscriptions> mbrSubs = new ArrayList<>(payment.getMemberLoan()
                        .getMember().getMemberSubscriptions());
                Alert alert_details = new Alert(Alert.AlertType.INFORMATION);
                alert_details.setTitle("Subscription Information");
                alert_details.setHeaderText("Member Subscription information for each installment");
                alert_details.getDialogPane().setContent(createContentGrid(mbrSubs, tot_sub, payment));
                alert_details.show();
            });
            return new SimpleObjectProperty<>(b);
        });








Session session = HibernateUtil.getSessionFactory().openSession();
        Criteria c = session.createCriteria(LoanPayment.class, "l");
        ProjectionList pList = Projections.projectionList();
        ClassMetadata lpMeta = session.getSessionFactory().getClassMetadata(LoanPayment.class);
        pList.add(Projections.property(lpMeta.getIdentifierPropertyName()));

        for (String prop : lpMeta.getPropertyNames()) {
            pList.add(Projections.property(prop), prop);
        }
        c.createAlias("memberLoan", "ml");
        c.createAlias("ml.member", "m");
        c.createAlias("m.memberSubscriptions", "ms");
        c.add(Restrictions.between("l.paymentDate",
                FxUtilsHandler.getDateFrom(from), FxUtilsHandler.getDateFrom(to)));
        c.setProjection(pList
                .add(Projections.sqlGroupProjection("CONCAT(m2_.member_id,'-',this_.payment_date) AS groupPro", "groupPro", new String[]{"groupPro"}, new Type[]{StringType.INSTANCE}))
                .add(Projections.sqlProjection("SUM(ml1_.loan_installment) as totalIns", new String[]{"totalIns"}, new Type[]{DoubleType.INSTANCE}))
        ).setResultTransformer(Transformers.aliasToBean(LoanPayment.class));
        List<LoanPayment> lPayList = (List<LoanPayment>) c.list();
        initPaymentTable(FXCollections.observableArrayList(lPayList));
        session.close();


============================================================================================================

    private void initCollectionTable(ObservableList<Member> mList) {

        ...

        total_pay_col.setCellValueFactory(new SubscriptionValueFactory());
        detail_view_col.setCellValueFactory(new DisplaySubscriptionFactory());
        
        ...
        
        collection_tbl.setItems(mlz);
    }


































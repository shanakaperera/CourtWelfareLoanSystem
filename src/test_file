


        month_sub_col.setCellValueFactory((TableColumn.CellDataFeatures<LoanPayment, Button> param) -> {
            LoanPayment payment = param.getValue();
            double tot_sub = payment.getAciFee() + payment.getHoiFee() + payment.getMembershipFee()
                    + payment.getAdmissionFee() + payment.getSavingsFee() + payment.getOptionalFee();
            Button b = new Button(TextFormatHandler.CURRENCY_DECIMAL_FORMAT.format(tot_sub));
            b.setOnAction(evt -> {
                List<MemberSubscriptions> mbrSubs = new ArrayList<>(payment.getMemberLoan()
                        .getMember().getMemberSubscriptions());
                Alert alert_details = new Alert(Alert.AlertType.INFORMATION);
                alert_details.setTitle("Subscription Information");
                alert_details.setHeaderText("Member Subscription information for each installment");
                alert_details.getDialogPane().setContent(createContentGrid(mbrSubs, tot_sub, payment));
                alert_details.show();
            });
            return new SimpleObjectProperty<>(b);
        });








Session session = HibernateUtil.getSessionFactory().openSession();
        Criteria c = session.createCriteria(LoanPayment.class, "l");
        ProjectionList pList = Projections.projectionList();
        ClassMetadata lpMeta = session.getSessionFactory().getClassMetadata(LoanPayment.class);
        pList.add(Projections.property(lpMeta.getIdentifierPropertyName()));

        for (String prop : lpMeta.getPropertyNames()) {
            pList.add(Projections.property(prop), prop);
        }
        c.createAlias("memberLoan", "ml");
        c.createAlias("ml.member", "m");
        c.createAlias("m.memberSubscriptions", "ms");
        c.add(Restrictions.between("l.paymentDate",
                FxUtilsHandler.getDateFrom(from), FxUtilsHandler.getDateFrom(to)));
        c.setProjection(pList
                .add(Projections.sqlGroupProjection("CONCAT(m2_.member_id,'-',this_.payment_date) AS groupPro", "groupPro", new String[]{"groupPro"}, new Type[]{StringType.INSTANCE}))
                .add(Projections.sqlProjection("SUM(ml1_.loan_installment) as totalIns", new String[]{"totalIns"}, new Type[]{DoubleType.INSTANCE}))
        ).setResultTransformer(Transformers.aliasToBean(LoanPayment.class));
        List<LoanPayment> lPayList = (List<LoanPayment>) c.list();
        initPaymentTable(FXCollections.observableArrayList(lPayList));
        session.close();


============================================================================================================

                       childLoan.setIsComplete(true);
                    childLoan.setClosedLoan(true);
                    s.update(childLoan);

                    LoanPayment childLastLoanPay = childLoan.getLoanPayments()
                            .stream().filter(p -> p.isIsLast()).findFirst().orElse(null);

                    double installWithoutPolli = FxUtilsHandler.roundNumber(childLoan.getLoanAmount() / childLoan.getNoOfRepay(), 0);
                    if (childLastLoanPay != null) {
                        int insts = childLastLoanPay.getInstallmentDue();
                        int last_inst_paid = childLastLoanPay.getInstallmentNo();
                        int no_of_repay = childLoan.getNoOfRepay();
                        double payment_amt = installWithoutPolli * insts;

                        ClosedLoan ccl = new ClosedLoan();
                        ccl.setEndedDate(new java.util.Date());
                        ccl.setClosedStart(++last_inst_paid);
                        ccl.setMemberLoanId(childLoan.getId());
                        ccl.setTotinstClosed(insts);
                        ccl.setActualinstAmt(installWithoutPolli);
                        ccl.setTotalPayment(insts * installWithoutPolli);
                        s.save(ccl);

                        java.util.Date[] instDates = setInstallmentDates(insts, childLastLoanPay);
                        childLastLoanPay.setIsLast(false);
                        s.update(childLastLoanPay);

                        for (int i = 0; i < insts; i++) {
                            LoanPayment lp = new LoanPayment();
                            lp.setInstallmentNo(last_inst_paid);
                            lp.setInstallmentDue(no_of_repay - last_inst_paid);
                            lp.setPaymentDate(new java.util.Date());
                            lp.setInstallmentDate(instDates[i]);
                            lp.setPaymentDue(installWithoutPolli * (no_of_repay - last_inst_paid));
                            if (i == (insts - 1)) {
                                lp.setIsLast(true);
                            } else {
                                lp.setIsLast(false);
                            }
                            lp.setMemberLoan(childLoan);
                            s.save(lp);
                            lpIds.add(lp.getId());
                            last_inst_paid++;
                        }

                        Type type = new TypeToken<List<Integer>>() {
                        }.getType();
                        ReceiptPay rp = new ReceiptPay();
                        rp.setMember(childLoan.getMember());
                        rp.setAmount(payment_amt);
                        rp.setPayDate(new java.util.Date());
                        rp.setPaymentType("installment");
                        rp.setPayIds(new Gson().toJson(lpIds, type));
                        rp.setReceiptCode("INV" + FxUtilsHandler.generateRandomNumber(7));
                        s.save(rp);

                        updateMemberLoan(childLoan, s, instDates[insts - 1]);





        month_sub_col.setCellValueFactory((TableColumn.CellDataFeatures<LoanPayment, Button> param) -> {
            LoanPayment payment = param.getValue();
            double tot_sub = payment.getAciFee() + payment.getHoiFee() + payment.getMembershipFee()
                    + payment.getAdmissionFee() + payment.getSavingsFee() + payment.getOptionalFee();
            Button b = new Button(TextFormatHandler.CURRENCY_DECIMAL_FORMAT.format(tot_sub));
            b.setOnAction(evt -> {
                List<MemberSubscriptions> mbrSubs = new ArrayList<>(payment.getMemberLoan()
                        .getMember().getMemberSubscriptions());
                Alert alert_details = new Alert(Alert.AlertType.INFORMATION);
                alert_details.setTitle("Subscription Information");
                alert_details.setHeaderText("Member Subscription information for each installment");
                alert_details.getDialogPane().setContent(createContentGrid(mbrSubs, tot_sub, payment));
                alert_details.show();
            });
            return new SimpleObjectProperty<>(b);
        });








Session session = HibernateUtil.getSessionFactory().openSession();
        Criteria c = session.createCriteria(LoanPayment.class, "l");
        ProjectionList pList = Projections.projectionList();
        ClassMetadata lpMeta = session.getSessionFactory().getClassMetadata(LoanPayment.class);
        pList.add(Projections.property(lpMeta.getIdentifierPropertyName()));

        for (String prop : lpMeta.getPropertyNames()) {
            pList.add(Projections.property(prop), prop);
        }
        c.createAlias("memberLoan", "ml");
        c.createAlias("ml.member", "m");
        c.createAlias("m.memberSubscriptions", "ms");
        c.add(Restrictions.between("l.paymentDate",
                FxUtilsHandler.getDateFrom(from), FxUtilsHandler.getDateFrom(to)));
        c.setProjection(pList
                .add(Projections.sqlGroupProjection("CONCAT(m2_.member_id,'-',this_.payment_date) AS groupPro", "groupPro", new String[]{"groupPro"}, new Type[]{StringType.INSTANCE}))
                .add(Projections.sqlProjection("SUM(ml1_.loan_installment) as totalIns", new String[]{"totalIns"}, new Type[]{DoubleType.INSTANCE}))
        ).setResultTransformer(Transformers.aliasToBean(LoanPayment.class));
        List<LoanPayment> lPayList = (List<LoanPayment>) c.list();
        initPaymentTable(FXCollections.observableArrayList(lPayList));
        session.close();


============================================================================================================

 if (getLastPay != null) {
                        updatePreviousInstallmentsOfMemberLoan(session, getLastPay);
                        LoanPayment lp = new LoanPayment();
                        lp.setChequeNo(chk_no_txt.getText());
                        lp.setMemberLoan(ml);
                        lp.setPaymentDate(new java.util.Date());
                        lp.setIsLast(true);
                        lp.setInstallmentDue(
                                ml.getLoanInstallment() > 0 ? ((ml.getNoOfRepay() - (getLastPay.getInstallmentNo() + 1)) >= 0 ? (ml.getNoOfRepay() - (getLastPay.getInstallmentNo() + 1)) : 0) : ml.getNoOfRepay()
                        );
                        lp.setInstallmentNo(getLastPay.getInstallmentNo() + 1);
                        lp.setInstallmentDate(getInstallmentDate(getLastPay.getInstallmentDate()));
                        lp.setPaidAmt(ml.getLoanInstallment());
                        lp.setListedPay(getListedPayFrom(ml, session));
                        lp.setPayOffice(m.getPayOffice().getId());
                        lp.setWorkOffice(m.getBranch().getId());
                        session.save(lp);

                        //========================Kota left checks if amount paying less than the installment, then assign to kotaya===============================
                        double kota_left = ((lp.getListedPay() > lp.getPaidAmt()) && lp.getPaidAmt() != 0 && lp.getPaidAmt() > 0) ? (lp.getListedPay() - lp.getPaidAmt()) : 0.0;
                        updateMemberLoan(ml, kota_left, lp.getPaidAmt() > 0, session, getInstallmentDate(getLastPay.getInstallmentDate()));

                        //end loan if required installment......
                        if (ml.getNoOfRepay() <= (getLastPay.getInstallmentNo() + 1)) {
                            endLoan(session, ml, ml.getNoOfRepay() < (getLastPay.getInstallmentNo() + 1));
                        }
                    } else {

                        LoanPayment lp = new LoanPayment();
                        lp.setChequeNo(chk_no_txt.getText());
                        lp.setMemberLoan(ml);
                        lp.setPaymentDate(new java.util.Date());
                        lp.setIsLast(true);
                        lp.setPaidAmt(ml.getLoanInstallment());
                        lp.setListedPay(getListedPayFrom(ml, session));
                        lp.setInstallmentDate(getDayOfMonth(Date.valueOf(chk_of_month_chooser.getValue())));

                        //=================IF MEMBER LOAN IS OLD LOAN THEN====================
                        if (ml.isOldLoan()) {

                            lp.setInstallmentDue(ml.getLoanInstallment() > 0 ? (ml.getNoOfRepay() - ml.getLastInstall()) : ml.getNoOfRepay());
                            lp.setInstallmentNo(ml.getLoanInstallment() > 0 ? (ml.getLastInstall() + 1) : ml.getLastInstall());
                            //updateOldLoan(ml, session, ml.getLoanInstallment());
                        } else {

                            lp.setInstallmentDue(ml.getLoanInstallment() > 0 ? (ml.getNoOfRepay() - 1) : ml.getNoOfRepay());
                            lp.setInstallmentNo(1);
                        }

                        lp.setPayOffice(m.getPayOffice().getId());
                        lp.setWorkOffice(m.getBranch().getId());
                        session.save(lp);

                        //========================Kota left checks if amount paying less than the installment, then assign to kotaya===============================
                        double kota_left = ((lp.getListedPay() > lp.getPaidAmt()) && lp.getPaidAmt() != 0 && lp.getPaidAmt() > 0) ? (lp.getListedPay() - lp.getPaidAmt()) : 0.0;
                        updateMemberLoan(ml, kota_left, lp.getPaidAmt() > 0, session, getDayOfMonth(Date.valueOf(chk_of_month_chooser.getValue())));
                    }

































